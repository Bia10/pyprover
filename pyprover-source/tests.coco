# Imports:

from pyprover.logic import (
    A,
    E,
    top,
    bot,
    And,
    Or,
)
from pyprover.tools import (
    proves,
    iff,
    simplify,
    simplest_form,
    sub_in,
)
from pyprover.atoms import (
    LowercasePropositions,
    StandardMath,
)

# Tests:

def test_propositional_logic():
    """Runs propositional logic tests."""
    with LowercasePropositions.using(globals()):

        # constructive theorems
        assert e&f `proves` e
        assert e&f `proves` f
        assert (e>>f, f>>g, e) `proves` g
        assert (e>>(f>>g), e>>f, e) `proves` g
        assert (e>>f, f>>g) `proves` e>>g
        assert e>>(f>>g) `proves` f>>(e>>g)
        assert e>>(f>>g) `proves` (e>>f)>>(e>>g)
        assert e `proves` f>>e
        assert top `proves` e>>(f>>e)
        assert e>>(f&g) `proves` (e>>f)&(e>>g)
        assert e>>(f>>g) `proves` (e&f)>>g
        assert (e&f)>>g `proves` e>>(f>>g)
        assert (e>>f)>>g `proves` (e&f)>>g
        assert e&(f>>g) `proves` (e>>f)>>g
        assert e `proves` e|f
        assert f `proves` e|f
        assert e|f `proves` f|e
        assert f>>g `proves` (e|f)>>(e|g)
        assert e `proves` e|e
        assert e `proves` ~~e
        assert ~e `proves` e>>f
        assert e>>f `proves` ~f>>~e
        assert e|f `proves` ~(~e&~f)
        assert e&f `proves` ~(~e|~f)
        assert ~(e|f) `proves` ~e&~f
        assert ~e&~f `proves` ~(e|f)
        assert ~e|~f `proves` ~(e&f)
        assert top `proves` ~(e&~e)
        assert e&~e `proves` f
        assert ~f `proves` f>>g
        assert (f>>g, ~f>>g) `proves` g
        assert g `proves` f>>g
        assert (f, ~(f&g)) `proves` ~g
        assert (p>>r, p>>~r) `proves` ~p
        assert top `proves` (p>>~p)>>~p
        assert bot `proves` a
        assert bot `proves` top
        assert a `proves` top

        # classical theorems
        assert ~~e `proves` e
        assert top `proves` e|~e
        assert top `proves` ((e>>f)>>e)>>e
        assert ~f>>~e `proves` e>>f
        assert ~(~e&~f) `proves` e|f
        assert ~(~e|~f) `proves` e&f
        assert ~(e&f) `proves` ~e|~f
        assert top `proves` (e>>f)|(f>>e)
        assert top `proves` (~~a|a)>>a
        assert p>>r `proves` (f>>r)|(p>>g)
        assert ~(f>>g) `proves` f&~g
        assert top `proves` (~f>>bot)>>f
        assert f>>g `proves` ~f|g
        assert top `proves` r&s|(~r|~s)
        assert f>>g `proves` g|~f
        assert (a&b)>>~c `proves` ~a|~b|~c
        assert f>>(g>>h) `proves` ~f|~g|h

        # other theorems
        assert t&(t>>d)|~t&~(t>>d) `proves` d
        assert (f>>g, c>>d) `proves` (f|c)>>(g|d)
        assert (f>>g)>>h `proves` f>>(g>>h)
        assert top `proves` p>>(s>>p)
        assert ~f|(f>>g) `proves` ~f|g
        assert (~f, g>>f) `proves` ~g
        assert (p>>s, r>>t, ~s|~t) `proves` ~p|~r
        assert top `proves` ~~(f|~f)
        assert top `proves` ~~(~~f>>f)
        assert (p|r, ~p) `proves` r
        assert (f|g, ~f) `proves` g
        assert (t|~a, ~a|~t) `proves` ~a
        assert top `proves` ~~((~f>>bot)>>f)
        assert (s&h|~s&~h)&~(s&h)|(s&~h|~s&h)&(s&h) `proves` ~s&~h
        assert ~a|~b|~c `proves` (a&b)>>~c
        assert ~p `proves` p>>bot
        assert (a|b, ~a|c) `proves` b|c
        assert top `proves` (f&g)>>g
        assert (p>>s, r>>t, p|r) `proves` s|t
        assert top `proves` ~p>>(p>>s)
        assert f>>g `proves` ((f&g)>>f)|(f>>(f&g))
        assert (f|~f)>>g `proves` ~~g
        assert p>>r `proves` p>>(p&r)
        assert (s&h|~s&~h)&(h|s)|(s&~h|~s&h)&~(h|s) `proves` s&h
        assert ~(f>>g) `proves` g>>f
        assert (f>>g)&(f>>h) `proves` f>>(g&h)
        assert (s&h|~s&~h)&(~s&~h)|(s&~h|~s&h)&~(~s&~h) `proves` ~(s&h)
        assert top `proves` (p>>(s>>e))>>((p>>s)>>(p>>e))
        assert top `proves` p>>p
        assert ~f `proves` ~(f&g)
        assert f>>~f `proves` ~f
        assert f>>g `proves` ~g>>~f
        assert (f&g)>>f
        assert (f>>(t&a|~t&~a), t&~f|~t&f, g>>(t&~a|~t&a), t&g|~t&~g) `proves` ~a
        assert t&(~t&~a)|~t&~(~t&~a) `proves` a
        assert ~f|~g|h `proves` f>>(g>>h)

        # invalid theorems
        assert not e>>(f>>g) `proves` (e>>f)>>g
        assert not (e&f)>>g `proves` (e>>f)>>g
        assert not (e>>f)>>g `proves` e&(f>>g)
        assert not e `proves` e&f
        assert not e|f `proves` e&f
        assert not e|top `proves` e
        assert not e `proves` e&bot
        assert not top `proves` bot

        # other tests
        assert And() == top
        assert Or() == bot
        assert (a^b, a) `proves` ~b
        assert f>>(g>>h) `iff` (f&g)>>h
        assert bot `iff` a&~a
        assert top `iff` a|~a
        assert top & bot |> simplify == bot
        assert simplify(a&a, b&b) == (a, b)
        assert a^b |> simplest_form == (b|a)&(~a|~b)
        assert (s&h|~s&~h)&~(s&h)|(s&~h|~s&h)&(s&h) |> simplest_form == ~s&~h
        assert a^b `sub_in` {a:True, b:False} |> simplify == top
        assert a^b `sub_in` {a:top, b:top} |> simplify == bot

def test_predicate_logic():
    """Runs predicate logic tests."""
    with StandardMath.using(globals()):

        # basic tests
        assert A(x, F) |> simplify == F
        assert E(x, F) |> simplify == F
        assert A(x, F(x)) & G(x) |> simplify == A(y, F(y) & G(x))
        assert A(x, F(x)) | G(x) |> simplify == A(y, F(y) | G(x))
        assert E(x, F(x)) & G(x) |> simplify == E(y, F(y) & G(x))
        assert E(x, F(x)) | G(x) |> simplify == E(y, F(y) | G(x))
        assert A(x, F(f(x))) == A(y, F(f(y)))
        assert E(x, F(f(x))) == E(y, F(f(y)))
        assert E(f, F(f(x))) == E(g, F(g(x)))

        # constructive theorems
        assert E(x, bot) `proves` bot
        assert top `proves` A(x, top)
        assert A(x, R(x) >> S(x)) `proves` A(y, R(y)) >> A(z, S(z))
        assert A(x, R(x) & S(x)) `proves` A(y, R(y)) & A(z, S(z))
        assert (A(x, R(x) >> S(x)), E(y, R(y))) `proves` E(z, S(z))
        assert E(x, R(x) & S(x)) `proves` E(y, R(y)) & E(z, S(z))
        assert E(x, R(x)) | E(y, S(y)) `proves` E(z, R(z) | S(z))
        assert E(x, R(x) | S(x)) `proves` E(y, R(y)) | E(z, S(z))
        assert A(x, R(x)) `proves` ~E(y, ~R(y))
        assert E(x, ~R(x)) `proves` ~A(y, R(y))
        assert A(x, ~R(x)) `proves` ~E(y, R(y))
        assert ~E(x, R(x)) `proves` A(y, ~R(y))
        assert R(j) `proves` E(x, R(x))

        # classical theorems
        assert ~E(x, ~R(x)) `proves` A(y, R(y))
        assert ~A(x, ~R(x)) `proves` E(y, R(y))
        assert ~A(x, R(x)) `proves` E(y, ~R(y))
        assert A(x, ~~D(x)) `proves` A(x, D(x))
        assert ~E(x, R(x)) `proves` A(y, ~R(y))
        assert top `proves` E(x, D(x)) | A(x, ~D(x))
        assert top `proves` E(x, ~D(x)) | A(x, D(x))
        assert E(x, top) `proves` E(x, D(x) >> A(y, D(y)))
        assert E(x, ~~D(x)) `proves` E(x, D(x))
        assert A(x, C(x) | D(x)) `proves` A(x, C(x)) | E(x, D(x))

        # other theorems
        assert A(x, H(j) >> T(x)) `proves` H(j) >> A(x, T(x))
        assert E(x, R(x) >> B(x)) `proves` A(x, R(x)) >> E(x, B(x))
        assert ~A(x, bot) `proves` E(x, top)
        assert A(x, E(y, F(y) | G(x))) `proves` A(x, G(x) | E(x, F(x)))
        assert (A(x, A(y, A(z, (S(x, y) & S(y, z)) >> S(x, z)))), ~E(x, S(x, x))) `proves` A(x, A(y, S(x, y) >> ~S(y, x)))
        assert A(x, G(x)) | A(x, B(x)) `proves` A(x, G(x) | B(x))
        assert E(z, A(k, P(z, k))) `proves` A(y, E(x, P(x, y)))
        assert E(x, C(x) & B(x)) `proves` E(x, B(x) & C(x))
        assert E(x, C(x, i) & B(x, j)) `proves` E(x, C(x, i) >> B(x, j))
        assert A(x, C(x) & B(x)) `proves` A(x, B(x) & C(x))
        assert A(x, C(x) & B(x)) `proves` A(x, C(x)) & A(x, B(x))
        assert A(x, bot) `proves` ~E(x, top)
        assert (~E(x, G(x)) | A(x, F(x)), C(j) >> A(x, D(x))) `proves` A(y, A(z, ~G(z) | F(y) & C(j) >> D(y)))
        assert A(x, G(x)) | E(x, F(x)) `proves` A(x, E(y, F(y) | G(x)))
        assert (P | E(x, W)) >> A(z, R) `proves` A(z, A(x, (P | W) >> R))

        # invalid theorems
        assert not A(x, R(x)) >> A(y, S(y)) `proves` A(z, R(z) >> S(z))
        assert not E(x, R(x)) & E(y, S(y)) `proves` E(z, R(z) & S(z))
        assert not E(x, R(x)) `proves` A(y, R(y))

        # non-empty universe theorems
        assert top `proves` E(x, top)
        assert top `proves` E(x, D(x) >> A(y, D(y)))
        assert (R(j), A(x, R(x) >> S(x))) `proves` S(j)
        assert A(x, R(x)) >> A(y, S(y)) `proves` E(x, A(y, ~R(x) | S(y)))
        assert A(x, R(x)) `proves` E(y, R(y))
        assert E(x, ~R(x)) `proves` E(y, R(y) >> (R(j) & R(k)))
        assert (T(i), A(x, T(x) >> T(s(x)))) `proves` T(s(i))
        assert top `proves` E(x, R(x) >> (R(j) & R(k)))

if __name__ == "__main__":
    test_propositional_logic()
    test_predicate_logic()
    print("<success>")
